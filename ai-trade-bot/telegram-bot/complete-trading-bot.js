const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const crypto = require('crypto');
require('dotenv').config();

// Configuraci√≥n del bot
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8343949971:AAFefvH90WJCYeEkbGxYVBDRy9dLpiSwAnQ';
const API_BASE_URL = process.env.API_BASE_URL || 'http://localhost:3000';
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY || 'your-32-char-secret-key-here!';

// Crear instancia del bot
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Almacenar datos de usuarios (en producci√≥n usar base de datos)
const userSessions = new Map();
const userWallets = new Map();
const userPositions = new Map();

// Funci√≥n de encriptaci√≥n simple
function encrypt(text) {
  const cipher = crypto.createCipher('aes-256-cbc', ENCRYPTION_KEY);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return encrypted;
}

function decrypt(encryptedText) {
  const decipher = crypto.createDecipher('aes-256-cbc', ENCRYPTION_KEY);
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Importar StellarSdk una sola vez
const StellarSdk = require('@stellar/stellar-sdk');
const { Horizon } = StellarSdk;

// Funci√≥n para generar wallet Stellar
function generateStellarWallet() {
  const keypair = StellarSdk.Keypair.random();
  return {
    publicKey: keypair.publicKey(),
    secretKey: keypair.secret()
  };
}

// Funci√≥n para fondear wallet en testnet
async function fundWallet(publicKey) {
  try {
    const server = new Horizon.Server('https://horizon-testnet.stellar.org');
    
    // Usar Friendbot para fondear la cuenta en testnet
    const response = await fetch(`https://friendbot.stellar.org/?addr=${publicKey}`);
    const result = await response.json();
    
    if (result.status === 400 && result.detail.includes('already funded')) {
      // La cuenta ya est√° fondada, verificar balance
      const account = await server.loadAccount(publicKey);
      const xlmBalance = account.balances.find(balance => balance.asset_type === 'native');
      
      return {
        success: true,
        balance: parseFloat(xlmBalance.balance),
        message: `‚úÖ Wallet ya estaba fondada con ${xlmBalance.balance} XLM`
      };
    } else if (result.status === 400) {
      throw new Error(`Friendbot error: ${result.detail}`);
    } else if (response.status !== 200) {
      throw new Error('Friendbot no pudo fondear la cuenta');
    } else {
      // Verificar que la cuenta est√© fondada
      const account = await server.loadAccount(publicKey);
      const xlmBalance = account.balances.find(balance => balance.asset_type === 'native');
      
      return {
        success: true,
        balance: parseFloat(xlmBalance.balance),
        message: `‚úÖ Wallet fondada con ${xlmBalance.balance} XLM`
      };
    }
  } catch (error) {
    console.error('Error fondeando wallet:', error);
    return {
      success: false,
      balance: 0,
      message: `‚ùå Error fondeando wallet: ${error.message}`
    };
  }
}

// Funci√≥n para obtener precio de XLM desde Soroswap (precio real de Stellar DEX)
async function getXlmPrice() {
  try {
    const response = await axios.get(`${API_BASE_URL}/api/soroswap/price?asset=XLM&amount=1`);
    
    if (response.data.success && response.data.data.soroswap.price > 0) {
      return response.data.data.soroswap.price;
    }
    
    // Fallback a CoinGecko si Soroswap falla
    const coingeckoResponse = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=stellar&vs_currencies=usd');
    return coingeckoResponse.data.stellar?.usd || 0.12;
  } catch (error) {
    console.error('Error obteniendo precio de XLM:', error);
    return 0.12; // Precio de fallback
  }
}

// Funci√≥n para obtener precio de USDC desde Soroswap
async function getUsdcPrice() {
  try {
    const response = await axios.get(`${API_BASE_URL}/api/soroswap/price?asset=USDC&amount=1`);
    
    if (response.data.success && response.data.data.soroswap.price > 0) {
      return response.data.data.soroswap.price;
    }
    
    return 1.0; // USDC siempre es ~$1
  } catch (error) {
    console.error('Error obteniendo precio de USDC:', error);
    return 1.0;
  }
}

// Funci√≥n para obtener cotizaci√≥n de swap REAL con retry
async function getSwapQuote(amount, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üìä Obteniendo cotizaci√≥n REAL para ${amount} XLM... (intento ${attempt}/${retries})`);
      
      const response = await axios.post(`${API_BASE_URL}/api/soroswap/quote`, {
        amount: amount
      });
      
      console.log('üìä Respuesta de cotizaci√≥n:', response.data);
      
      if (response.data.success) {
        return response.data.data;
      } else {
        console.error(`‚ùå Error en cotizaci√≥n (intento ${attempt}):`, response.data.message);
        
        // Si es rate limit, esperar antes del siguiente intento
        if (response.data.message && response.data.message.includes('rate limit')) {
          if (attempt < retries) {
            const waitTime = attempt * 2000; // 2s, 4s, 6s
            console.log(`‚è≥ Rate limit detectado, esperando ${waitTime}ms...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
            continue;
          }
        }
        
        return null;
      }
    } catch (error) {
      console.error(`‚ùå Error obteniendo cotizaci√≥n (intento ${attempt}):`, error.message);
      
      // Si es rate limit, esperar antes del siguiente intento
      if (error.response && error.response.status === 429) {
        if (attempt < retries) {
          const waitTime = attempt * 2000; // 2s, 4s, 6s
          console.log(`‚è≥ Rate limit detectado, esperando ${waitTime}ms...`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }
      }
      
      if (attempt === retries) {
        return null;
      }
    }
  }
  
  return null;
}

// Funci√≥n para obtener cotizaci√≥n de trading REAL
async function getTradeQuote(amount, leverage = 2, tradeType = 'long', retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üìà Obteniendo cotizaci√≥n REAL para trade: ${amount} XLM, ${leverage}x, ${tradeType}... (intento ${attempt}/${retries})`);
      
      const response = await axios.post(`${API_BASE_URL}/api/contract/query`, {
        action: 'get_quote',
        amount: amount,
        leverage: leverage,
        trade_type: tradeType
      });
      
      console.log('üìà Respuesta de cotizaci√≥n de trading:', response.data);
      
      if (response.data.success) {
        return response.data.data;
      } else {
        console.error(`‚ùå Error en cotizaci√≥n de trading (intento ${attempt}):`, response.data.message);
        
        // Si es rate limit, esperar antes del siguiente intento
        if (response.data.message && response.data.message.includes('rate limit')) {
          if (attempt < retries) {
            const waitTime = attempt * 2000; // 2s, 4s, 6s
            console.log(`‚è≥ Rate limit detectado, esperando ${waitTime}ms...`);
            await new Promise(resolve => setTimeout(resolve, waitTime));
            continue;
          }
        }
        
        return null;
      }
    } catch (error) {
      console.error(`‚ùå Error obteniendo cotizaci√≥n de trading (intento ${attempt}):`, error.message);
      
      if (attempt === retries) {
        return null;
      }
    }
  }
  
  return null;
}

// Funci√≥n para firmar transacciones
async function signTransaction(transactionXdr, secretKey) {
  try {
    const keypair = StellarSdk.Keypair.fromSecret(secretKey);
    const transaction = StellarSdk.TransactionBuilder.fromXDR(transactionXdr, StellarSdk.Networks.TESTNET);
    transaction.sign(keypair);
    return transaction.toXDR();
  } catch (error) {
    console.error('‚ùå Error firmando transacci√≥n:', error);
    throw new Error(`Error firmando transacci√≥n: ${error.message}`);
  }
}

// Funci√≥n para ejecutar swap REAL con retry
async function executeSwap(publicKey, secretKey, amount, quote, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üîÑ Ejecutando swap REAL: ${amount} XLM ‚Üí USDC (intento ${attempt}/${retries})`);
      console.log('üîÑ Quote recibida:', quote);
      
      // 1. Crear transacci√≥n de swap
      const executeResponse = await axios.post(`${API_BASE_URL}/api/soroswap/execute`, {
        sourceAccount: publicKey,
        quote: quote.quote,
        network: 'testnet'
      });
    
    if (!executeResponse.data.success) {
      throw new Error(executeResponse.data.message || 'Error creando transacci√≥n');
    }
    
    console.log('‚úÖ Transacci√≥n creada:', executeResponse.data);
    
    // 2. Verificar si es transacci√≥n de fallback
    if (executeResponse.data.fallback) {
      throw new Error('Rate limit excedido en Soroswap API. Por favor intenta m√°s tarde.');
    }
    
    // 3. Verificar si necesita crear trustline primero
    if (executeResponse.data.requiresTrustline) {
      console.log('üîó Se requiere crear trustline primero...');
      
      const transactionXdr = executeResponse.data.transactionXdr;
      if (!transactionXdr || transactionXdr === 'AAAAAQAAAAA...') {
        throw new Error('No se recibi√≥ XDR v√°lido para crear trustline');
      }
      
      console.log('üîê Firmando transacci√≥n de trustline...');
      const signedTransaction = await signTransaction(transactionXdr, secretKey);
      
      console.log('üì§ Enviando transacci√≥n de trustline...');
      const trustlineResponse = await axios.post(`${API_BASE_URL}/api/soroswap/submit`, {
        signedTransaction: signedTransaction
      });
      
      if (!trustlineResponse.data.success) {
        throw new Error(trustlineResponse.data.message || 'Error creando trustline');
      }
      
      console.log('‚úÖ Trustline creada exitosamente:', trustlineResponse.data);
      
      // Esperar un poco para que la trustline se propague
      console.log('‚è≥ Esperando propagaci√≥n de trustline...');
      await new Promise(resolve => setTimeout(resolve, 5000)); // Aumentar a 5 segundos
      
      // Ahora crear la transacci√≥n de swap real
      console.log('üîÑ Creando transacci√≥n de swap...');
      const swapExecuteResponse = await axios.post(`${API_BASE_URL}/api/soroswap/execute`, {
        sourceAccount: publicKey,
        quote: quote.quote,
        network: 'testnet'
      });
      
      if (!swapExecuteResponse.data.success) {
        console.error('‚ùå Error creando transacci√≥n de swap:', swapExecuteResponse.data);
        throw new Error(swapExecuteResponse.data.message || 'Error creando transacci√≥n de swap');
      }
      
      console.log('‚úÖ Transacci√≥n de swap creada:', swapExecuteResponse.data);
      
      // El XDR puede estar en transactionXdr o en soroswapResponse.xdr
      const swapTransactionXdr = swapExecuteResponse.data.transactionXdr || 
                                 swapExecuteResponse.data.data?.soroswapResponse?.xdr;
      
      console.log('üîç XDR encontrado:', swapTransactionXdr ? swapTransactionXdr.substring(0, 50) + '...' : 'undefined');
      console.log('üîç transactionXdr:', swapExecuteResponse.data.transactionXdr);
      console.log('üîç data.soroswapResponse.xdr:', swapExecuteResponse.data.data?.soroswapResponse?.xdr);
      
      if (!swapTransactionXdr || swapTransactionXdr === 'AAAAAQAAAAA...') {
        console.error('‚ùå XDR de swap inv√°lido:', swapTransactionXdr);
        console.error('‚ùå Respuesta completa:', swapExecuteResponse.data);
        throw new Error('No se recibi√≥ XDR v√°lido para el swap. La trustline puede necesitar m√°s tiempo para propagarse.');
      }
      
      console.log('üîê Firmando transacci√≥n de swap...');
      const signedSwapTransaction = await signTransaction(swapTransactionXdr, secretKey);
      
      console.log('üì§ Enviando transacci√≥n de swap...');
      const swapSubmitResponse = await axios.post(`${API_BASE_URL}/api/soroswap/submit`, {
        signedTransaction: signedSwapTransaction
      });
      
      if (!swapSubmitResponse.data.success) {
        throw new Error(swapSubmitResponse.data.message || 'Error enviando transacci√≥n de swap');
      }
      
      console.log('‚úÖ Swap REAL ejecutado exitosamente:', swapSubmitResponse.data);
      
      return {
        success: true,
        hash: swapSubmitResponse.data.data.hash,
        ledger: swapSubmitResponse.data.data.ledger,
        message: 'Swap ejecutado exitosamente',
        trustlineHash: trustlineResponse.data.data.hash
      };
    } else {
      // Swap directo sin trustline
      // El XDR puede estar en transactionXdr o en soroswapResponse.xdr
      const transactionXdr = executeResponse.data.transactionXdr || 
                             executeResponse.data.data?.soroswapResponse?.xdr;
      
      console.log('üîç XDR encontrado (swap directo):', transactionXdr ? transactionXdr.substring(0, 50) + '...' : 'undefined');
      console.log('üîç transactionXdr:', executeResponse.data.transactionXdr);
      console.log('üîç data.soroswapResponse.xdr:', executeResponse.data.data?.soroswapResponse?.xdr);
      
      if (!transactionXdr) {
        console.error('‚ùå No se recibi√≥ XDR de la transacci√≥n');
        console.error('‚ùå Respuesta completa:', executeResponse.data);
        throw new Error('No se recibi√≥ XDR de la transacci√≥n');
      }
      
      // Si es XDR de fallback, no podemos proceder
      if (transactionXdr === 'AAAAAQAAAAA...') {
        throw new Error('Rate limit excedido en Soroswap API. Por favor intenta m√°s tarde.');
      }
      
      console.log('üîê Firmando transacci√≥n de swap...');
      const signedTransaction = await signTransaction(transactionXdr, secretKey);
      
      console.log('üì§ Enviando transacci√≥n de swap...');
      const submitResponse = await axios.post(`${API_BASE_URL}/api/soroswap/submit`, {
        signedTransaction: signedTransaction
      });
      
      if (!submitResponse.data.success) {
        throw new Error(submitResponse.data.message || 'Error enviando transacci√≥n');
      }
      
      console.log('‚úÖ Swap REAL ejecutado exitosamente:', submitResponse.data);
      
      return {
        success: true,
        hash: submitResponse.data.data.hash,
        ledger: submitResponse.data.data.ledger,
        message: 'Swap ejecutado exitosamente'
      };
    }
    
    } catch (error) {
      console.error(`‚ùå Error ejecutando swap REAL (intento ${attempt}):`, error);
      
      // Si es rate limit, esperar antes del siguiente intento
      if (error.message && error.message.includes('Rate limit')) {
        if (attempt < retries) {
          const waitTime = attempt * 3000; // 3s, 6s, 9s
          console.log(`‚è≥ Rate limit detectado, esperando ${waitTime}ms...`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }
      }
      
      if (attempt === retries) {
        return { 
          success: false, 
          message: `Error ejecutando swap: ${error.message}` 
        };
      }
    }
  }
  
  return { 
    success: false, 
    message: 'Error ejecutando swap despu√©s de m√∫ltiples intentos' 
  };
}

// Funci√≥n para ejecutar trade REAL con retry
async function executeTrade(publicKey, secretKey, amount, leverage, tradeType, quote, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`üìà Ejecutando trade REAL: ${amount} XLM, ${leverage}x, ${tradeType}... (intento ${attempt}/${retries})`);
      console.log('üìà Quote recibida:', quote);
      
      // 1. Crear transacci√≥n de trading
      const executeResponse = await axios.post(`${API_BASE_URL}/api/contract/real-operations`, {
        action: 'open_position',
        sourceAccount: publicKey,
        amount: amount,
        leverage: leverage,
        trade_type: tradeType,
        quote: quote
      });
    
      if (!executeResponse.data.success) {
        throw new Error(executeResponse.data.message || 'Error creando transacci√≥n de trading');
      }
      
      console.log('‚úÖ Transacci√≥n de trading creada:', executeResponse.data);
      
      // 2. Verificar si es transacci√≥n de fallback
      if (executeResponse.data.fallback) {
        throw new Error('Rate limit excedido en Contract API. Por favor intenta m√°s tarde.');
      }
      
      // 3. Obtener XDR de la transacci√≥n
      const transactionXdr = executeResponse.data.data?.transactionXdr || 
                             executeResponse.data.transactionXdr;
      
      console.log('üîç XDR encontrado (trade):', transactionXdr ? transactionXdr.substring(0, 50) + '...' : 'undefined');
      
      if (!transactionXdr) {
        console.error('‚ùå No se recibi√≥ XDR de la transacci√≥n de trading');
        console.error('‚ùå Respuesta completa:', executeResponse.data);
        throw new Error('No se recibi√≥ XDR de la transacci√≥n de trading');
      }
      
      // 4. Firmar transacci√≥n
      console.log('üîê Firmando transacci√≥n de trading...');
      const signedTransaction = await signTransaction(transactionXdr, secretKey);
      
      // 5. Enviar transacci√≥n
      console.log('üì§ Enviando transacci√≥n de trading...');
      const submitResponse = await axios.post(`${API_BASE_URL}/api/contract/real-submit`, {
        signedTransaction: signedTransaction
      });
      
      if (!submitResponse.data.success) {
        throw new Error(submitResponse.data.message || 'Error enviando transacci√≥n de trading');
      }
      
      console.log('‚úÖ Trade REAL ejecutado exitosamente:', submitResponse.data);
      
      return {
        success: true,
        hash: submitResponse.data.data.hash,
        ledger: submitResponse.data.data.ledger,
        message: 'Trade ejecutado exitosamente'
      };
      
    } catch (error) {
      console.error(`‚ùå Error ejecutando trade REAL (intento ${attempt}):`, error);
      
      // Si es rate limit, esperar antes del siguiente intento
      if (error.message && error.message.includes('Rate limit')) {
        if (attempt < retries) {
          const waitTime = attempt * 3000; // 3s, 6s, 9s
          console.log(`‚è≥ Rate limit detectado, esperando ${waitTime}ms...`);
          await new Promise(resolve => setTimeout(resolve, waitTime));
          continue;
        }
      }
      
      if (attempt === retries) {
        return { 
          success: false, 
          message: `Error ejecutando trade: ${error.message}` 
        };
      }
    }
  }
  
  return { 
    success: false, 
    message: 'Error ejecutando trade despu√©s de m√∫ltiples intentos' 
  };
}

// Funci√≥n para abrir posici√≥n de trading
async function openPosition(publicKey, amount, leverage, type) {
  try {
    const response = await axios.post(`${API_BASE_URL}/api/contract/real-operations`, {
      action: 'open_position',
      publicKey: publicKey,
      amount: amount,
      leverage: leverage,
      type: type
    });
    return response.data;
  } catch (error) {
    console.error('Error abriendo posici√≥n:', error);
    return null;
  }
}

// Funci√≥n para cerrar posici√≥n
async function closePosition(publicKey, positionId) {
  try {
    const response = await axios.post(`${API_BASE_URL}/api/contract/real-operations`, {
      action: 'close_position',
      publicKey: publicKey,
      positionId: positionId
    });
    return response.data;
  } catch (error) {
    console.error('Error cerrando posici√≥n:', error);
    return null;
  }
}

// Comando /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const username = msg.from.username || msg.from.first_name;
  
  // Verificar si ya tiene wallet
  const hasWallet = userWallets.has(chatId);
  
  const welcomeMessage = `
ü§ñ **¬°Hola ${username}!** 

Soy tu bot de trading completo en Stellar. Puedo ayudarte a:

üí∞ **Trading de Perpetuos**
‚Ä¢ Abrir posiciones long/short
‚Ä¢ Cerrar posiciones autom√°ticamente
‚Ä¢ Calcular PnL en tiempo real

üîÑ **Swaps Autom√°ticos**
‚Ä¢ XLM ‚Üî USDC instant√°neos
‚Ä¢ Mejores tasas con Soroswap
‚Ä¢ Confirmaci√≥n en segundos

üìä **Gesti√≥n Completa**
‚Ä¢ Crear wallet segura
‚Ä¢ Ver balances en tiempo real
‚Ä¢ Historial de transacciones

**Comandos principales:**
/wallet - Crear/gestionar wallet
/swap - Hacer swap XLM‚ÜíUSDC
/trade - Abrir posici√≥n de trading
/positions - Ver posiciones activas
/balance - Ver balance actual
/price - Precio de XLM

¬øEmpezamos? üöÄ
  `;
  
  const keyboard = {
    reply_markup: {
      inline_keyboard: hasWallet ? [
        [
          { text: 'üîë Mi Wallet', callback_data: 'view_wallet' },
          { text: 'üí∞ Ver Balance', callback_data: 'view_balance' }
        ],
        [
          { text: 'üìä Ver Precios', callback_data: 'view_prices' },
          { text: 'üîÑ Hacer Swap', callback_data: 'make_swap' }
        ],
        [
          { text: 'üìà Trading', callback_data: 'trading_menu' },
          { text: 'üìã Mis Posiciones', callback_data: 'view_positions' }
        ]
      ] : [
        [
          { text: 'üîë Crear Wallet', callback_data: 'create_wallet' },
          { text: 'üí∞ Ver Balance', callback_data: 'view_balance' }
        ],
        [
          { text: 'üìä Ver Precios', callback_data: 'view_prices' },
          { text: 'üîÑ Hacer Swap', callback_data: 'make_swap' }
        ],
        [
          { text: 'üìà Trading', callback_data: 'trading_menu' },
          { text: 'üìã Mis Posiciones', callback_data: 'view_positions' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown', ...keyboard });
});

// Comando /wallet
bot.onText(/\/wallet/, (msg) => {
  const chatId = msg.chat.id;
  
  if (userWallets.has(chatId)) {
    const wallet = userWallets.get(chatId);
    const walletMessage = `
üîë **Tu Wallet Stellar**

**üí∞ Clave P√∫blica (Para Recibir Fondos):**
\`${wallet.publicKey}\`
*Copia esta clave para recibir XLM de otras wallets*

**Estado:** ‚úÖ Activa
**Red:** Stellar Testnet
**Creada:** ${new Date(wallet.createdAt).toLocaleString()}

üåê **Ver en Explorador:**
[Testnet Explorer](https://stellar.expert/explorer/testnet/account/${wallet.publicKey})
*Haz clic para ver tu wallet en tiempo real*

**Comandos:**
/balance - Ver balance
/export - Exportar wallet
/import - Importar wallet existente
    `;
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üí∞ Ver Balance', callback_data: 'view_balance' },
            { text: 'üì§ Exportar', callback_data: 'export_wallet' }
          ],
          [
            { text: 'üîÑ Importar', callback_data: 'import_wallet' },
            { text: 'üóëÔ∏è Eliminar', callback_data: 'delete_wallet' }
          ],
          [
            { text: 'üìã Copiar Clave P√∫blica', callback_data: 'copy_public_key' }
          ]
        ]
      }
    };
    
    bot.sendMessage(chatId, walletMessage, { parse_mode: 'Markdown', ...keyboard });
  } else {
    const createMessage = `
üîë **Crear Nueva Wallet**

No tienes una wallet creada. ¬øQuieres crear una nueva?

**Caracter√≠sticas:**
‚Ä¢ Generaci√≥n segura de claves
‚Ä¢ Encriptaci√≥n local
‚Ä¢ Compatible con Stellar
‚Ä¢ Fondeo autom√°tico en testnet

**¬øCrear wallet ahora?**
    `;
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ S√≠, Crear', callback_data: 'create_wallet' },
            { text: '‚ùå Cancelar', callback_data: 'cancel' }
          ]
        ]
      }
    };
    
    bot.sendMessage(chatId, createMessage, { parse_mode: 'Markdown', ...keyboard });
  }
});

// Comando /swap
bot.onText(/\/swap (.+) XLM/, async (msg, match) => {
  const chatId = msg.chat.id;
  const amount = parseFloat(match[1]);
  
  if (!userWallets.has(chatId)) {
    bot.sendMessage(chatId, '‚ùå Primero debes crear una wallet con /wallet');
    return;
  }
  
  if (isNaN(amount) || amount <= 0) {
    bot.sendMessage(chatId, '‚ùå Cantidad inv√°lida. Usa: /swap 5 XLM');
    return;
  }
  
  try {
    const wallet = userWallets.get(chatId);
    
    // Verificar si la wallet es nueva (menos de 60 segundos)
    const walletAge = Date.now() - wallet.createdAt;
    const isNewWallet = walletAge < 60000; // 60 segundos
    
    if (isNewWallet) {
      const remainingTime = Math.ceil((60000 - walletAge) / 1000);
      const waitMessage = `
‚è∞ **Wallet Nueva Detectada**

**Tiempo restante:** ${remainingTime} segundos
**Estado:** Esperando propagaci√≥n en la red...

**¬øPor qu√©?**
Las wallets nuevas necesitan tiempo para propagarse en Stellar testnet antes de poder hacer swaps.

**Pr√≥ximos pasos:**
‚Ä¢ Espera ${remainingTime} segundos m√°s
‚Ä¢ Luego usa /swap ${amount} XLM nuevamente
‚Ä¢ O usa /balance para verificar tu wallet

üîÑ **Reintentar en ${remainingTime}s...**
      `;
      
      await bot.sendMessage(chatId, waitMessage, { parse_mode: 'Markdown' });
      return;
    }
    
    // Mostrar mensaje de inicio
    const startMessage = `
üîÑ **Iniciando Swap**
‚Ä¢ **Cantidad:** ${amount} XLM
‚Ä¢ **Destino:** USDC
‚Ä¢ **Wallet:** ${wallet.publicKey.slice(0, 8)}...
‚Ä¢ **Estado:** Obteniendo cotizaci√≥n...
    `;
    
    await bot.sendMessage(chatId, startMessage, { parse_mode: 'Markdown' });
    
    // Obtener cotizaci√≥n
    const quote = await getSwapQuote(amount);
    
    if (!quote || !quote.quote) {
      bot.sendMessage(chatId, '‚ùå Error obteniendo cotizaci√≥n. Intenta de nuevo.');
      return;
    }
    
    const outputAmount = (parseInt(quote.quote.amountOut) / 10_000_000).toFixed(6);
    
    // Mostrar cotizaci√≥n y pedir confirmaci√≥n
    const quoteMessage = `
üìä **Cotizaci√≥n Obtenida**
‚Ä¢ **Entrada:** ${amount} XLM
‚Ä¢ **Salida:** ~${outputAmount} USDC
‚Ä¢ **Protocolo:** ${quote.quote.platform}
‚Ä¢ **Red:** ${quote.network}

**¬øConfirmas el swap?**
    `;
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ Confirmar Swap', callback_data: `confirm_swap_${amount}` },
            { text: '‚ùå Cancelar', callback_data: 'cancel' }
          ]
        ]
      }
    };
    
    await bot.sendMessage(chatId, quoteMessage, { parse_mode: 'Markdown', ...keyboard });
    
    // Guardar datos del swap
    userSessions.set(chatId, {
      type: 'swap',
      amount,
      quote,
      status: 'waiting_confirmation'
    });
    
  } catch (error) {
    console.error('Error en swap:', error);
    bot.sendMessage(chatId, '‚ùå Error procesando el swap. Intenta de nuevo.');
  }
});

// Comando /trade
bot.onText(/\/trade/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!userWallets.has(chatId)) {
    bot.sendMessage(chatId, '‚ùå Primero debes crear una wallet con /wallet');
    return;
  }
  
  // Verificar si la wallet es nueva (menos de 60 segundos)
  const wallet = userWallets.get(chatId);
  const walletAge = Date.now() - wallet.createdAt;
  const isNewWallet = walletAge < 60000; // 60 segundos
  
  if (isNewWallet) {
    const remainingTime = Math.ceil((60000 - walletAge) / 1000);
    const waitMessage = `
‚è∞ **Wallet Nueva Detectada**

**Tiempo restante:** ${remainingTime} segundos
**Estado:** Esperando propagaci√≥n en la red...

**¬øPor qu√©?**
Las wallets nuevas necesitan tiempo para propagarse en Stellar testnet antes de poder hacer trading.

**Pr√≥ximos pasos:**
‚Ä¢ Espera ${remainingTime} segundos m√°s
‚Ä¢ Luego usa /trade nuevamente
‚Ä¢ O usa /balance para verificar tu wallet

üîÑ **Reintentar en ${remainingTime}s...**
    `;
    
    bot.sendMessage(chatId, waitMessage, { parse_mode: 'Markdown' });
    return;
  }
  
  const tradeMessage = `
üìà **Trading de Perpetuos**

**Configuraci√≥n de Posici√≥n:**
‚Ä¢ **Cantidad:** 100 XLM (por defecto)
‚Ä¢ **Leverage:** 2x (por defecto)
‚Ä¢ **Tipo:** Long (por defecto)

**¬øQuieres personalizar la configuraci√≥n?**
  `;
  
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìà Long 2x', callback_data: 'trade_long_2x' },
          { text: 'üìâ Short 2x', callback_data: 'trade_short_2x' }
        ],
        [
          { text: 'üìà Long 5x', callback_data: 'trade_long_5x' },
          { text: 'üìâ Short 5x', callback_data: 'trade_short_5x' }
        ],
        [
          { text: '‚öôÔ∏è Personalizar', callback_data: 'custom_trade' },
          { text: '‚ùå Cancelar', callback_data: 'cancel' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, tradeMessage, { parse_mode: 'Markdown', ...keyboard });
});

// Comando /positions
bot.onText(/\/positions/, (msg) => {
  const chatId = msg.chat.id;
  
  if (!userPositions.has(chatId) || userPositions.get(chatId).length === 0) {
    bot.sendMessage(chatId, '‚ùå No tienes posiciones activas.\n\nUsa /trade para abrir una nueva posici√≥n.');
    return;
  }
  
  const positions = userPositions.get(chatId);
  let positionsMessage = 'üìä **Tus Posiciones Activas**\n\n';
  
  positions.forEach((position, index) => {
    const pnl = position.pnl >= 0 ? `+$${position.pnl.toFixed(2)}` : `-$${Math.abs(position.pnl).toFixed(2)}`;
    const pnlEmoji = position.pnl >= 0 ? 'üìà' : 'üìâ';
    
    positionsMessage += `**Posici√≥n #${index + 1}:**\n`;
    positionsMessage += `‚Ä¢ Tipo: ${position.type.toUpperCase()} ${position.leverage}x\n`;
    positionsMessage += `‚Ä¢ Cantidad: ${position.amount} XLM\n`;
    positionsMessage += `‚Ä¢ Precio Entrada: $${position.entryPrice}\n`;
    positionsMessage += `‚Ä¢ PnL: ${pnlEmoji} ${pnl}\n`;
    positionsMessage += `‚Ä¢ Estado: ${position.status}\n\n`;
  });
  
  const keyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üîÑ Actualizar', callback_data: 'refresh_positions' },
          { text: 'üìà Nueva Posici√≥n', callback_data: 'trading_menu' }
        ]
      ]
    }
  };
  
  bot.sendMessage(chatId, positionsMessage, { parse_mode: 'Markdown', ...keyboard });
});

// Comando /balance
bot.onText(/\/balance/, async (msg) => {
  const chatId = msg.chat.id;
  
  if (!userWallets.has(chatId)) {
    bot.sendMessage(chatId, '‚ùå Primero debes crear una wallet con /wallet');
    return;
  }
  
  try {
    const wallet = userWallets.get(chatId);
    const price = await getXlmPrice();
    
    // Obtener balance real de la red Stellar
    const server = new Horizon.Server('https://horizon-testnet.stellar.org');
    const account = await server.loadAccount(wallet.publicKey);
    const xlmBalance = account.balances.find(balance => balance.asset_type === 'native');
    const balance = parseFloat(xlmBalance.balance);
    
    // Actualizar balance en memoria
    wallet.balance = balance;
    userWallets.set(chatId, wallet);
    
    const usdValue = balance * price;
    
    // Verificar si la wallet es nueva
    const walletAge = Date.now() - wallet.createdAt;
    const isNewWallet = walletAge < 60000; // 60 segundos
    const remainingTime = isNewWallet ? Math.ceil((60000 - walletAge) / 1000) : 0;
    
    let balanceMessage = `
üí∞ **Balance de tu Wallet**

**XLM:** ${balance.toFixed(7)} XLM
**USD:** $${usdValue.toFixed(2)}
**Precio XLM:** $${price.toFixed(6)}

**üí∞ Clave P√∫blica (Para Recibir Fondos):**
\`${wallet.publicKey}\`
*Copia esta clave para recibir XLM de otras wallets*

**Estado:** ${balance > 0 ? '‚úÖ Fondada' : '‚ùå Sin fondos'}

`;

    if (isNewWallet) {
      balanceMessage += `‚è∞ **Temporizador de Red:**
**Tiempo restante:** ${remainingTime} segundos
**Estado:** Wallet nueva, esperando propagaci√≥n...

**‚ö†Ô∏è No puedes hacer swaps/trading hasta que termine el temporizador**

`;
    } else {
      balanceMessage += `‚úÖ **Wallet Lista:**
**Estado:** Lista para swaps y trading

`;
    }

    balanceMessage += `**√öltima actualizaci√≥n:** ${new Date().toLocaleString()}`;
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÑ Actualizar', callback_data: 'refresh_balance' },
            { text: 'üìä Ver Precios', callback_data: 'view_prices' }
          ]
        ]
      }
    };
    
    bot.sendMessage(chatId, balanceMessage, { parse_mode: 'Markdown', ...keyboard });
    
  } catch (error) {
    console.error('Error obteniendo balance:', error);
    bot.sendMessage(chatId, `‚ùå Error obteniendo balance: ${error.message}`);
  }
});

// Comando /price
bot.onText(/\/price/, async (msg) => {
  const chatId = msg.chat.id;
  
  try {
    const [xlmPrice, usdcPrice] = await Promise.all([
      getXlmPrice(),
      getUsdcPrice()
    ]);
    
    // Obtener datos adicionales de CoinGecko
    const coingeckoResponse = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=stellar&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true');
    const coingeckoData = coingeckoResponse.data.stellar;
    
    const priceMessage = `
üìä **Precios Reales de Stellar DEX**

**XLM (Soroswap):** $${xlmPrice.toFixed(6)} USD
**USDC (Soroswap):** $${usdcPrice.toFixed(6)} USD

**Referencia CoinGecko:**
‚Ä¢ XLM: $${coingeckoData?.usd?.toFixed(6) || 'N/A'} USD
‚Ä¢ Cambio 24h: ${coingeckoData?.usd_24h_change?.toFixed(2) || 'N/A'}% ${coingeckoData?.usd_24h_change >= 0 ? 'üìà' : 'üìâ'}
‚Ä¢ Volumen 24h: $${(coingeckoData?.usd_24h_vol / 1000000)?.toFixed(2) || 'N/A'}M

**Red:** Stellar Testnet
**Actualizado:** ${new Date().toLocaleString()}
    `;
    
    const keyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîÑ Actualizar', callback_data: 'refresh_price' },
            { text: 'üí∞ Ver Balance', callback_data: 'view_balance' }
          ]
        ]
      }
    };
    
    bot.sendMessage(chatId, priceMessage, { parse_mode: 'Markdown', ...keyboard });
    
  } catch (error) {
    bot.sendMessage(chatId, '‚ùå Error obteniendo precio de XLM');
  }
});

// Manejar callbacks de botones
bot.on('callback_query', async (callbackQuery) => {
  const message = callbackQuery.message;
  const chatId = message.chat.id;
  const data = callbackQuery.data;
  
  try {
    await bot.answerCallbackQuery(callbackQuery.id);
    
    if (data === 'create_wallet') {
      // Mostrar mensaje de creaci√≥n
      await bot.editMessageText('üîë **Creando wallet...**\n\nPor favor espera...', {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
      const wallet = generateStellarWallet();
      const encryptedSecret = encrypt(wallet.secretKey);
      
      // Mostrar mensaje de wallet creada
      await bot.editMessageText(`üîë **Wallet Creada!**

**Clave P√∫blica:**
\`${wallet.publicKey}\`

**Estado:** ‚è≥ Esperando fondeo...
**Red:** Stellar Testnet

üåê **Ver en Explorador:**
[Testnet Explorer](https://stellar.expert/explorer/testnet/account/${wallet.publicKey})
*La wallet aparecer√° vac√≠a hasta que se fondee*

üí∞ **Fondeando con 10,000 XLM...**`, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
      // Peque√±a pausa para que el usuario vea la wallet
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mostrar mensaje de fondeo
      await bot.editMessageText('üí∞ **Fondeando wallet con 10,000 XLM...**\n\nConectando con Stellar testnet...', {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
      // Fondear la wallet
      const fundResult = await fundWallet(wallet.publicKey);
      
      userWallets.set(chatId, {
        publicKey: wallet.publicKey,
        secretKey: encryptedSecret,
        createdAt: Date.now(),
        balance: fundResult.balance,
        funded: fundResult.success
      });
      
      const walletMessage = `
üîë **Wallet Creada y Fondada Exitosamente!**

**üí∞ Clave P√∫blica (Para Recibir Fondos):**
\`${wallet.publicKey}\`
*Copia esta clave para recibir XLM de otras wallets*

**üîê Clave Privada (MANTENER SECRETA):**
\`${wallet.secretKey}\`

**Balance XLM:** ${fundResult.balance.toFixed(7)} XLM
**Estado:** ${fundResult.success ? '‚úÖ Fondada' : '‚ùå Error de fondeo'}
**Red:** Stellar Testnet

üåê **Ver en Explorador:**
[Testnet Explorer](https://stellar.expert/explorer/testnet/account/${wallet.publicKey})
*Haz clic para ver tu wallet con balance real*

‚ö†Ô∏è **IMPORTANTE:** 
‚Ä¢ Guarda tu clave privada en un lugar seguro
‚Ä¢ Comparte SOLO la clave p√∫blica para recibir fondos

‚è∞ **Temporizador de Red:**
La wallet necesita 60 segundos para propagarse en la red antes de poder hacer swaps.

**Pr√≥ximos pasos:**
‚Ä¢ Espera 60 segundos antes de hacer tu primer swap
‚Ä¢ Usa /balance para ver tu balance
‚Ä¢ Usa /swap despu√©s del temporizador
‚Ä¢ Usa /trade para abrir posiciones
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üí∞ Ver Balance', callback_data: 'view_balance' },
              { text: 'üîÑ Hacer Swap', callback_data: 'make_swap' }
            ],
            [
              { text: 'üìã Copiar Clave P√∫blica', callback_data: 'copy_public_key' }
            ]
          ]
        }
      };
      
      await bot.editMessageText(walletMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } else if (data === 'view_balance') {
      const wallet = userWallets.get(chatId);
      if (!wallet) {
        await bot.editMessageText('‚ùå No tienes una wallet creada. Usa /wallet para crear una.', {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      // Obtener precio actual de XLM
      const price = await getXlmPrice();
      const usdValue = wallet.balance * price;
      
      const balanceMessage = `
üí∞ **Balance de tu Wallet**

**XLM:** ${wallet.balance.toFixed(7)} XLM
**USD:** $${usdValue.toFixed(2)}
**Precio XLM:** $${price.toFixed(6)}

**Wallet:** \`${wallet.publicKey}\`
**Estado:** ${wallet.funded ? '‚úÖ Fondada' : '‚ùå No fondada'}

**√öltima actualizaci√≥n:** ${new Date().toLocaleString()}
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ Actualizar', callback_data: 'refresh_balance' },
              { text: 'üìä Ver Precios', callback_data: 'view_prices' }
            ]
          ]
        }
      };
      
      await bot.editMessageText(balanceMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } else if (data === 'view_prices') {
      const price = await getXlmPrice();
      const priceMessage = `
üìä **Precio de XLM**

**Precio actual:** $${price.toFixed(6)} USD
**Red:** Stellar Testnet
**Actualizado:** ${new Date().toLocaleString()}

**Cambio 24h:** +2.5% üìà
**Volumen 24h:** $1.2M
      `;
      
      await bot.editMessageText(priceMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
    } else if (data === 'make_swap') {
      const swapMessage = `
üîÑ **Hacer Swap XLM ‚Üí USDC**

**Cantidad sugerida:** 10 XLM
**Destino:** USDC
**Red:** Stellar Testnet

**Nota:** Actualmente solo soportamos swaps a USDC

**Usa el comando:**
\`/swap 10 XLM\`

**O elige una cantidad r√°pida:**
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '5 XLM', callback_data: 'swap_5' },
              { text: '10 XLM', callback_data: 'swap_10' },
              { text: '50 XLM', callback_data: 'swap_50' }
            ],
            [
              { text: '100 XLM', callback_data: 'swap_100' },
              { text: 'Personalizar', callback_data: 'custom_swap' }
            ]
          ]
        }
      };
      
      await bot.editMessageText(swapMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } else if (data.startsWith('swap_')) {
      const amount = data.replace('swap_', '');
      
      if (!userWallets.has(chatId)) {
        await bot.editMessageText('‚ùå **Error:** No tienes una wallet creada. Usa /start para crear una.', {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      const wallet = userWallets.get(chatId);
      const secretKey = decrypt(wallet.secretKey);
      
      const swapMessage = `
üîÑ **Iniciando Swap REAL de ${amount} XLM**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Estado:** Obteniendo cotizaci√≥n de Soroswap...

**Por favor espera...**
      `;
      
      await bot.editMessageText(swapMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
      try {
        // 1. Obtener cotizaci√≥n real
        const quote = await getSwapQuote(amount);
        if (!quote || !quote.quote) {
          throw new Error('No se pudo obtener cotizaci√≥n de Soroswap');
        }
        
        // 2. Ejecutar swap real
        await bot.editMessageText(`
üîÑ **Ejecutando Swap REAL de ${amount} XLM**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Estado:** Ejecutando transacci√≥n...

**Nota:** Si es tu primer swap, se crear√° trustline para USDC primero

**Por favor espera...**
        `, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        
        const swapResult = await executeSwap(wallet.publicKey, secretKey, amount, quote);
        
        if (swapResult.success) {
          let successMessage = `
‚úÖ **Swap REAL Exitoso!**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Hash:** \`${swapResult.hash}\`
**Ledger:** ${swapResult.ledger}
**Red:** Stellar Testnet

üåê **Ver Comprobante:**
[Explorador de Transacci√≥n](https://stellar.expert/explorer/testnet/tx/${swapResult.hash})
*Haz clic para ver el comprobante en el explorador*
          `;
          
          // Si se cre√≥ trustline, mostrarlo
          if (swapResult.trustlineHash) {
            successMessage += `

üîó **Trustline Creada:**
[Ver Trustline](https://stellar.expert/explorer/testnet/tx/${swapResult.trustlineHash})
*Se cre√≥ trustline para USDC antes del swap*
            `;
          }
          
          successMessage += `

**Nota:** Actualmente solo soportamos swaps a USDC

**¬°Tu swap REAL se ha completado exitosamente!** üéâ
          `;
          
          await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: message.message_id,
            parse_mode: 'Markdown'
          });
        } else {
          throw new Error(swapResult.message);
        }
        
      } catch (error) {
        console.error('‚ùå Error ejecutando swap REAL:', error);
        
        let errorMessage = `
‚ùå **Error en Swap REAL**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Error:** ${error.message}
        `;
        
        if (error.message.includes('Rate limit')) {
          errorMessage += `

‚è∞ **Rate Limit Excedido**
La API de Soroswap est√° temporalmente saturada. Por favor intenta en unos minutos.

**Sugerencias:**
‚Ä¢ Espera 2-3 minutos antes de intentar de nuevo
‚Ä¢ Prueba con una cantidad menor
‚Ä¢ Usa /balance para verificar tu wallet
          `;
        } else {
          errorMessage += `

**Por favor intenta de nuevo o contacta soporte.**
          `;
        }
        
        await bot.editMessageText(errorMessage, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
      }
      
    } else if (data.startsWith('confirm_swap_')) {
      const amount = data.replace('confirm_swap_', '');
      
      if (!userWallets.has(chatId)) {
        await bot.editMessageText('‚ùå **Error:** No tienes una wallet creada. Usa /start para crear una.', {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      const wallet = userWallets.get(chatId);
      const secretKey = decrypt(wallet.secretKey);
      
      const processingMessage = `
üöÄ **Ejecutando Swap REAL...**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Estado:** Obteniendo cotizaci√≥n...

**Por favor espera...**
      `;
      
      await bot.editMessageText(processingMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
      try {
        // 1. Obtener cotizaci√≥n real
        await bot.editMessageText(`
üöÄ **Ejecutando Swap REAL...**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Estado:** Obteniendo cotizaci√≥n de Soroswap...

**Nota:** Si hay rate limit, se reintentar√° autom√°ticamente

**Por favor espera...**
        `, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        
        const quote = await getSwapQuote(amount);
        if (!quote || !quote.quote) {
          throw new Error('No se pudo obtener cotizaci√≥n de Soroswap despu√©s de m√∫ltiples intentos');
        }
        
        // 2. Ejecutar swap real
        await bot.editMessageText(`
üöÄ **Ejecutando Swap REAL...**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Estado:** Ejecutando transacci√≥n...

**Por favor espera...**
        `, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        
        const swapResult = await executeSwap(wallet.publicKey, secretKey, amount, quote);
        
        if (swapResult.success) {
          let successMessage = `
‚úÖ **Swap REAL Exitoso!**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Hash:** \`${swapResult.hash}\`
**Ledger:** ${swapResult.ledger}
**Red:** Stellar Testnet

üåê **Ver Comprobante:**
[Explorador de Transacci√≥n](https://stellar.expert/explorer/testnet/tx/${swapResult.hash})
*Haz clic para ver el comprobante en el explorador*
          `;
          
          // Si se cre√≥ trustline, mostrarlo
          if (swapResult.trustlineHash) {
            successMessage += `

üîó **Trustline Creada:**
[Ver Trustline](https://stellar.expert/explorer/testnet/tx/${swapResult.trustlineHash})
*Se cre√≥ trustline para USDC antes del swap*
            `;
          }
          
          successMessage += `

**Nota:** Actualmente solo soportamos swaps a USDC

**¬°Tu swap REAL se ha completado exitosamente!** üéâ
          `;
          
          await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: message.message_id,
            parse_mode: 'Markdown'
          });
        } else {
          throw new Error(swapResult.message);
        }
        
      } catch (error) {
        console.error('‚ùå Error ejecutando swap REAL:', error);
        
        let errorMessage = `
‚ùå **Error en Swap REAL**

**Cantidad:** ${amount} XLM ‚Üí USDC
**Error:** ${error.message}
        `;
        
        if (error.message.includes('Rate limit')) {
          errorMessage += `

‚è∞ **Rate Limit Excedido**
La API de Soroswap est√° temporalmente saturada. Por favor intenta en unos minutos.

**Sugerencias:**
‚Ä¢ Espera 2-3 minutos antes de intentar de nuevo
‚Ä¢ Prueba con una cantidad menor
‚Ä¢ Usa /balance para verificar tu wallet
          `;
        } else {
          errorMessage += `

**Por favor intenta de nuevo o contacta soporte.**
          `;
        }
        
        await bot.editMessageText(errorMessage, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
      }
      
    } else if (data.startsWith('trade_')) {
      const [_, type, leverage] = data.split('_');
      
      const tradeMessage = `
üìà **Abriendo Posici√≥n ${type.toUpperCase()} ${leverage}x**

**Cantidad:** 100 XLM
**Leverage:** ${leverage}x
**Tipo:** ${type.toUpperCase()}
**Estado:** Procesando...

**Por favor espera...**
      `;
      
      await bot.editMessageText(tradeMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
      // Simular apertura de posici√≥n
      setTimeout(async () => {
        const positionId = Date.now().toString();
        const position = {
          id: positionId,
          type: type,
          leverage: parseInt(leverage),
          amount: 100,
          entryPrice: 0.15,
          pnl: 0,
          status: 'open'
        };
        
        if (!userPositions.has(chatId)) {
          userPositions.set(chatId, []);
        }
        userPositions.get(chatId).push(position);
        
        const successMessage = `
‚úÖ **Posici√≥n Abierta Exitosamente!**

**Tipo:** ${type.toUpperCase()} ${leverage}x
**Cantidad:** 100 XLM
**Precio Entrada:** $0.150000
**ID:** ${positionId}

**¬°Tu posici√≥n est√° activa!** üìà

Usa /positions para ver todas tus posiciones.
        `;
        
        await bot.editMessageText(successMessage, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
      }, 3000);
      
    } else if (data === 'trading_menu') {
      const tradeMessage = `
üìà **Trading de Perpetuos**

**Configuraci√≥n de Posici√≥n:**
‚Ä¢ **Cantidad:** 100 XLM (por defecto)
‚Ä¢ **Leverage:** 2x (por defecto)
‚Ä¢ **Tipo:** Long (por defecto)

**¬øQuieres personalizar la configuraci√≥n?**
      `;
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìà Long 2x', callback_data: 'trade_long_2x' },
              { text: 'üìâ Short 2x', callback_data: 'trade_short_2x' }
            ],
            [
              { text: 'üìà Long 5x', callback_data: 'trade_long_5x' },
              { text: 'üìâ Short 5x', callback_data: 'trade_short_5x' }
            ],
            [
              { text: '‚öôÔ∏è Personalizar', callback_data: 'custom_trade' },
              { text: '‚ùå Cancelar', callback_data: 'cancel' }
            ]
          ]
        }
      };
      
      await bot.editMessageText(tradeMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } else if (data === 'view_positions') {
      if (!userPositions.has(chatId) || userPositions.get(chatId).length === 0) {
        const noPositionsMessage = `
‚ùå **No tienes posiciones activas**

Usa /trade para abrir una nueva posici√≥n.
        `;
        
        await bot.editMessageText(noPositionsMessage, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      const positions = userPositions.get(chatId);
      let positionsMessage = 'üìä **Tus Posiciones Activas**\n\n';
      
      positions.forEach((position, index) => {
        const pnl = position.pnl >= 0 ? `+$${position.pnl.toFixed(2)}` : `-$${Math.abs(position.pnl).toFixed(2)}`;
        const pnlEmoji = position.pnl >= 0 ? 'üìà' : 'üìâ';
        
        positionsMessage += `**Posici√≥n #${index + 1}:**\n`;
        positionsMessage += `‚Ä¢ Tipo: ${position.type.toUpperCase()} ${position.leverage}x\n`;
        positionsMessage += `‚Ä¢ Cantidad: ${position.amount} XLM\n`;
        positionsMessage += `‚Ä¢ Precio Entrada: $${position.entryPrice}\n`;
        positionsMessage += `‚Ä¢ PnL: ${pnlEmoji} ${pnl}\n`;
        positionsMessage += `‚Ä¢ Estado: ${position.status}\n\n`;
      });
      
      const keyboard = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ Actualizar', callback_data: 'refresh_positions' },
              { text: 'üìà Nueva Posici√≥n', callback_data: 'trading_menu' }
            ]
          ]
        }
      };
      
      await bot.editMessageText(positionsMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown',
        ...keyboard
      });
      
    } else if (data === 'refresh_balance') {
      const wallet = userWallets.get(chatId);
      if (!wallet) {
        await bot.editMessageText('‚ùå No tienes una wallet creada. Usa /wallet para crear una.', {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      // Actualizar balance desde la red
      await bot.editMessageText('üîÑ **Actualizando balance...**\n\nConsultando Stellar testnet...', {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
      
      try {
        const server = new Horizon.Server('https://horizon-testnet.stellar.org');
        const account = await server.loadAccount(wallet.publicKey);
        const xlmBalance = account.balances.find(balance => balance.asset_type === 'native');
        
        // Actualizar balance en memoria
        wallet.balance = parseFloat(xlmBalance.balance);
        userWallets.set(chatId, wallet);
        
        // Obtener precio actual
        const price = await getXlmPrice();
        const usdValue = wallet.balance * price;
        
        const balanceMessage = `
üí∞ **Balance Actualizado**

**XLM:** ${wallet.balance.toFixed(7)} XLM
**USD:** $${usdValue.toFixed(2)}
**Precio XLM:** $${price.toFixed(6)}

**Wallet:** \`${wallet.publicKey}\`
**Estado:** ‚úÖ Fondada

**√öltima actualizaci√≥n:** ${new Date().toLocaleString()}
        `;
        
        const keyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üîÑ Actualizar', callback_data: 'refresh_balance' },
                { text: 'üìä Ver Precios', callback_data: 'view_prices' }
              ]
            ]
          }
        };
        
        await bot.editMessageText(balanceMessage, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown',
          ...keyboard
        });
        
      } catch (error) {
        await bot.editMessageText(`‚ùå Error actualizando balance: ${error.message}`, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
      }
      
    } else if (data === 'cancel') {
      await bot.editMessageText('‚ùå Operaci√≥n cancelada.', {
        chat_id: chatId,
        message_id: message.message_id
      });
    } else if (data === 'copy_public_key') {
      const wallet = userWallets.get(chatId);
      if (!wallet) {
        await bot.editMessageText('‚ùå No tienes una wallet creada.', {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      const copyMessage = `
üìã **Clave P√∫blica para Copiar**

**üí∞ Clave P√∫blica:**
\`${wallet.publicKey}\`

**Instrucciones:**
1. Toca y mant√©n presionado el texto de arriba
2. Selecciona "Copiar"
3. Comparte esta clave para recibir XLM

**‚ö†Ô∏è Importante:**
‚Ä¢ Esta es tu clave P√öBLICA (segura de compartir)
‚Ä¢ NUNCA compartas tu clave privada
‚Ä¢ Solo usa esta clave para recibir fondos

**Comandos:**
/wallet - Ver informaci√≥n completa de tu wallet
/balance - Ver balance actual
      `;
      
      await bot.editMessageText(copyMessage, {
        chat_id: chatId,
        message_id: message.message_id,
        parse_mode: 'Markdown'
      });
    } else if (data.startsWith('trade_')) {
      // Manejar callbacks de trading
      const wallet = userWallets.get(chatId);
      if (!wallet) {
        await bot.editMessageText('‚ùå No tienes una wallet creada. Usa /wallet para crear una.', {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      // Verificar si la wallet es nueva (menos de 60 segundos)
      const walletAge = Date.now() - wallet.createdAt;
      const isNewWallet = walletAge < 60000; // 60 segundos
      
      if (isNewWallet) {
        const remainingTime = Math.ceil((60000 - walletAge) / 1000);
        const waitMessage = `
‚è∞ **Wallet Nueva Detectada**

**Tiempo restante:** ${remainingTime} segundos
**Estado:** Esperando propagaci√≥n en la red...

**¬øPor qu√©?**
Las wallets nuevas necesitan tiempo para propagarse en Stellar testnet antes de poder hacer trading.

**Pr√≥ximos pasos:**
‚Ä¢ Espera ${remainingTime} segundos m√°s
‚Ä¢ Luego usa /trade nuevamente
‚Ä¢ O usa /balance para verificar tu wallet

üîÑ **Reintentar en ${remainingTime}s...**
        `;
        
        await bot.editMessageText(waitMessage, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      // Parsear datos del trade
      const parts = data.split('_');
      const tradeType = parts[1]; // long o short
      const leverage = parseInt(parts[2].replace('x', '')); // 2 o 5
      const amount = 100; // Cantidad fija por ahora
      
      try {
        // Mostrar mensaje de inicio
        await bot.editMessageText(`üìà **Iniciando Trade REAL**

**Configuraci√≥n:**
‚Ä¢ **Tipo:** ${tradeType.toUpperCase()}
‚Ä¢ **Leverage:** ${leverage}x
‚Ä¢ **Cantidad:** ${amount} XLM
‚Ä¢ **Wallet:** ${wallet.publicKey.slice(0, 8)}...

**Estado:** Obteniendo cotizaci√≥n...`, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        
        // Obtener cotizaci√≥n
        const quote = await getTradeQuote(amount, leverage, tradeType);
        
        if (!quote) {
          await bot.editMessageText('‚ùå Error obteniendo cotizaci√≥n de trading. Intenta de nuevo.', {
            chat_id: chatId,
            message_id: message.message_id,
            parse_mode: 'Markdown'
          });
          return;
        }
        
        // Mostrar cotizaci√≥n y confirmar
        const quoteMessage = `
üìà **Cotizaci√≥n de Trading**

**Configuraci√≥n:**
‚Ä¢ **Tipo:** ${tradeType.toUpperCase()}
‚Ä¢ **Leverage:** ${leverage}x
‚Ä¢ **Cantidad:** ${amount} XLM

**Cotizaci√≥n:**
‚Ä¢ **Precio Entrada:** $${quote.entryPrice || 'N/A'}
‚Ä¢ **Liquidation Price:** $${quote.liquidationPrice || 'N/A'}
‚Ä¢ **Margen Requerido:** ${quote.marginRequired || 'N/A'} XLM

**¬øConfirmar este trade?**
        `;
        
        const confirmKeyboard = {
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ Confirmar Trade', callback_data: `confirm_trade_${tradeType}_${leverage}x_${amount}` },
                { text: '‚ùå Cancelar', callback_data: 'cancel' }
              ]
            ]
          }
        };
        
        await bot.editMessageText(quoteMessage, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown',
          ...confirmKeyboard
        });
        
      } catch (error) {
        console.error('Error en trading:', error);
        await bot.editMessageText(`‚ùå Error procesando el trade: ${error.message}`, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
      }
      
    } else if (data.startsWith('confirm_trade_')) {
      // Confirmar trade
      const wallet = userWallets.get(chatId);
      if (!wallet) {
        await bot.editMessageText('‚ùå No tienes una wallet creada.', {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        return;
      }
      
      // Parsear datos del trade
      const parts = data.split('_');
      const tradeType = parts[2]; // long o short
      const leverage = parseInt(parts[3].replace('x', '')); // 2 o 5
      const amount = parseInt(parts[4]); // 100
      
      try {
        // Mostrar mensaje de ejecuci√≥n
        await bot.editMessageText(`üîÑ **Ejecutando Trade REAL**

**Configuraci√≥n:**
‚Ä¢ **Tipo:** ${tradeType.toUpperCase()}
‚Ä¢ **Leverage:** ${leverage}x
‚Ä¢ **Cantidad:** ${amount} XLM

**Estado:** Procesando transacci√≥n...`, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
        
        // Obtener cotizaci√≥n nuevamente
        const quote = await getTradeQuote(amount, leverage, tradeType);
        
        if (!quote) {
          await bot.editMessageText('‚ùå Error obteniendo cotizaci√≥n. Intenta de nuevo.', {
            chat_id: chatId,
            message_id: message.message_id,
            parse_mode: 'Markdown'
          });
          return;
        }
        
        // Ejecutar trade
        const tradeResult = await executeTrade(
          wallet.publicKey,
          decrypt(wallet.secretKey),
          amount,
          leverage,
          tradeType,
          quote
        );
        
        if (tradeResult.success) {
          // Agregar posici√≥n a la lista del usuario
          if (!userPositions.has(chatId)) {
            userPositions.set(chatId, []);
          }
          
          const position = {
            id: Date.now(),
            type: tradeType,
            leverage: leverage,
            amount: amount,
            entryPrice: quote.entryPrice || 0,
            liquidationPrice: quote.liquidationPrice || 0,
            pnl: 0,
            status: 'Activa',
            createdAt: Date.now(),
            hash: tradeResult.hash,
            ledger: tradeResult.ledger
          };
          
          userPositions.get(chatId).push(position);
          
          const successMessage = `
‚úÖ **Trade REAL Ejecutado Exitosamente!**

**Configuraci√≥n:**
‚Ä¢ **Tipo:** ${tradeType.toUpperCase()}
‚Ä¢ **Leverage:** ${leverage}x
‚Ä¢ **Cantidad:** ${amount} XLM
‚Ä¢ **Precio Entrada:** $${quote.entryPrice || 'N/A'}

**Transacci√≥n:**
‚Ä¢ **Hash:** \`${tradeResult.hash}\`
‚Ä¢ **Ledger:** ${tradeResult.ledger}

üåê **Ver en Explorador:**
[Testnet Explorer](https://stellar.expert/explorer/testnet/tx/${tradeResult.hash})

**Pr√≥ximos pasos:**
‚Ä¢ Usa /positions para ver tus posiciones
‚Ä¢ Usa /balance para ver tu balance actualizado
          `;
          
          const keyboard = {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'üìä Ver Posiciones', callback_data: 'view_positions' },
                  { text: 'üí∞ Ver Balance', callback_data: 'view_balance' }
                ],
                [
                  { text: 'üìà Nueva Posici√≥n', callback_data: 'trading_menu' }
                ]
              ]
            }
          };
          
          await bot.editMessageText(successMessage, {
            chat_id: chatId,
            message_id: message.message_id,
            parse_mode: 'Markdown',
            ...keyboard
          });
          
        } else {
          await bot.editMessageText(`‚ùå Error ejecutando trade: ${tradeResult.message}`, {
            chat_id: chatId,
            message_id: message.message_id,
            parse_mode: 'Markdown'
          });
        }
        
      } catch (error) {
        console.error('Error ejecutando trade:', error);
        await bot.editMessageText(`‚ùå Error ejecutando trade: ${error.message}`, {
          chat_id: chatId,
          message_id: message.message_id,
          parse_mode: 'Markdown'
        });
      }
    }
    
  } catch (error) {
    console.error('Error en callback:', error);
    await bot.editMessageText('‚ùå Ocurri√≥ un error. Intenta de nuevo.', {
      chat_id: chatId,
      message_id: message.message_id
    });
  }
});

// Manejo de errores
bot.on('error', (error) => {
  console.error('Error del bot:', error);
});

bot.on('polling_error', (error) => {
  console.error('Error de polling:', error);
});

console.log('ü§ñ Bot de Trading Completo iniciado...');
console.log('üì± Comandos disponibles: /start, /wallet, /swap, /trade, /positions, /balance, /price');
